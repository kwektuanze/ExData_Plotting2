if (!state %in% unique(csv_data[, 7])) {
stop("invalid state")
}
switch(outcome, `heart attack` = {
col = 11
}, `heart failure` = {
col = 17
}, pneumonia = {
col = 23
}, stop("invalid outcome"))
## Return hospital name in that state with lowest 30-day death rate
df = csv_data[csv_data$State == state, c(2, col)]
df[which.min(df[, 2]), 1]
}
best("TX", "heart attack")
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
dat <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
if (!state %in% unique(dat[, 7])) {
stop("invalid state")
}
switch(outcome, `heart attack` = {
col = 11
}, `heart failure` = {
col = 17
}, pneumonia = {
col = 23
}, stop("invalid outcome"))
dat[, col] = as.numeric(dat[, col])
df = dat[dat[, 7] == state, c(2, col)]
df = na.omit(df)
nhospital = nrow(df)
switch(num, best = {
num = 1
}, worst = {
num = nhospital
})
if (num > nhospital) {
return(NA)
}
## Return a data frame with the hospital names and the
## (abbreviated) state name
o = order(df[, 2], df[, 1])
df[o, ][num, 1]
}
?order
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
csv_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
if (!state %in% unique(csv_data[, 7])) {
stop("invalid state")
}
switch(outcome, `heart attack` = {
col = 11
}, `heart failure` = {
col = 17
}, pneumonia = {
col = 23
}, stop("invalid outcome"))
csv_data[, col] = as.numeric(csv_data[, col])
df = csv_data[csv_data[, 7] == state, c(2, col)]
df = na.omit(df)
nhospital = nrow(df)
## For each state, find the hospital of the given rank
switch(num, best = {
num = 1
}, worst = {
num = nhospital
})
if (num > nhospital) {
return(NA)
}
## Return a data frame with the hospital names and the
## (abbreviated) state name
ordering = order(df[, 2], df[, 1])
df[ordering, ][num, 1]
}
head(rankall("heart attack", 20), 10)
head(rankall("heart attack", 20), 10)
rankhospital("TX", "heart failure", 4)
rankhospital("TX", "heart failure", 4)
rankhospital("MN", "heart attack", 5000)
rankall <- function(outcome, num = "best") {
## Read outcome data
csv_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
states = unique(csv_data[, 7])
switch(outcome, `heart attack` = {
col = 11
}, `heart failure` = {
col = 17
}, pneumonia = {
col = 23
}, stop("invalid outcome"))
csv_data[, col] = as.numeric(csv_data[, col])
csv_data = csv_data[, c(2, 7, col)]
csv_data = na.omit(csv_data)
## For each state, find the hospital of the given rank
ranking <- function(state) {
df = csv_data[csv_data[, 2] == state, ]
nhospital = nrow(df)
switch(num, best = {
num = 1
}, worst = {
num = nhospital
})
if (num > nhospital) {
result = NA
}
o = order(df[, 3], df[, 1])
result = df[o, ][num, 1]
c(result, state)
}
output = do.call(rbind, lapply(states, ranking))
output = output[order(output[, 2]), ]
rownames(output) = output[, 2]
colnames(output) = c("hospital", "state")
data.frame(output)
}
head(rankall("heart attack", 20), 10)
?do.call
rankall <- function(outcome, num = "best") {
## Read outcome data
csv_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
states = unique(csv_data[, 7])
switch(outcome, `heart attack` = {
col = 11
}, `heart failure` = {
col = 17
}, pneumonia = {
col = 23
}, stop("invalid outcome"))
csv_data[, col] = as.numeric(csv_data[, col])
csv_data = csv_data[, c(2, 7, col)]
csv_data = na.omit(csv_data)
## For each state, find the hospital of the given rank
ranking <- function(state) {
df = csv_data[csv_data[, 2] == state, ]
nhospital = nrow(df)
switch(num, best = {
num = 1
}, worst = {
num = nhospital
})
if (num > nhospital) {
hospital = NA
}
ordering = order(df[, 3], df[, 1])
hospital = df[ordering, ][num, 1]
c(hospital, state)
}
output = do.call(rbind, lapply(states, ranking))
output = output[order(output[, 2]), ]
rownames(output) = output[, 2]
colnames(output) = c("hospital", "state")
data.frame(output)
}
head(rankall("heart attack", 20), 10)
rankall <- function(outcome, num = "best") {
## Read outcome data
csv_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
states = unique(csv_data[, 7])
switch(outcome, `heart attack` = {
col = 11
}, `heart failure` = {
col = 17
}, pneumonia = {
col = 23
}, stop("invalid outcome"))
csv_data[, col] = as.numeric(csv_data[, col])
csv_data = csv_data[, c(2, 7, col)]
csv_data = na.omit(csv_data)
## For each state, find the hospital of the given rank
ranking <- function(state) {
df = csv_data[csv_data[, 2] == state, ]
nhospital = nrow(df)
switch(num, best = {
num = 1
}, worst = {
num = nhospital
})
if (num > nhospital) {
hospital = NA
}
ordering = order(df[, 3], df[, 1])
hospital = df[ordering, ][num, 1]
c(hospital, state)
}
result = do.call(rbind, lapply(states, ranking))
result = result[order(result[, 2]), ]
rownames(result) = result[, 2]
colnames(result) = c("hospital", "state")
data.frame(result)
}
head(rankall("heart attack", 20), 10)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
submit()
submit()
submit()
5
submit()
submit()
submit()
submit()
submit()
submit()
install.packages("swirl")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
getwd()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
package_version("dplyr")
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?manip
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -size)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500 | r_os == "linux-gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, ip_id)
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
(cran2, package, ip_id)
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(ip_id, package, size)
cran3 <- select("ip_id", "package", "size")
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by()
?group_by
by_package <- group_by(cran, "package")
by_package <- group_by(cran, package)
by_package
?summarise
summarise(by_package, mean(size))
summarize(by_package, mean(size))
submit()
submit()
submit()
submit()
pack_sum
?quantile
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
head(top_counts, 20)
arrange(top_counts, desc(count))
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
top_unique
arrange(top_unique, desc(count))
arrange(top_unique, desc(unique))
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
head(students)
students2
res <- gather(students2, sex_class, value)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, c("sex", "class"))
submit()
?submit
students3
?gather
submit()
?spread
?spread
submit()
submit()
submit()
submit()
submit()
extract_numeric("class5")
?mutate
?mutate
?mutate
submit()
?mutate
?mutate
submit()
students4
submit()
submit()
submit()
submit()
passed
failed
mutate()
mutate(passed, status)
submit()
passed <- passed %>% mutate(status = "passed")
passed
failed <- failed %>% mutate(status = "failed")
?rbind_list
rbind_list(passed, failed)
sat
submit()
submit()
?gather
?separate
submit()
submit()
submit()
?group_by
submit()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
this_dat <- today()
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label=TRUE)
this_moment <- now()
this_moment
second(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
ymd("March 12, 1975")
mdy("March 12, 1975")
mdy(25081985)
dmy(25081985)
ymd("192012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
now("America/New_York")
nyc <- now("America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
with_tz(arrive, tzone="Asia/Hong_Kong")
arrive <- with_tz(arrive, tzone="Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
> fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileUrl, destfile="./data/microdata.csv", method="curl")
microData <- read.table("./data/microdata.csv", sep=",", header=TRUE)
download.file(fileUrl, destfile="./data/microdata.csv")
download.file(fileUrl, destfile="microdata.csv", method="curl")
microData <- read.table("microdata.csv", sep=",", header=TRUE)
sum(!is.na(microData$VAL[microData$VAL==24]))
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(fileUrl, destfile="nga.xlsx", method="curl")
dateDownloaded <- date()
dateDownloaded
library(xlsx)
install.packages("xlsx")
library(xlsx)
colIndex <- 7:15
rowIndex <- 18:23
dat <- read.xlsx("nga.xlsx", sheetIndex=1, header=TRUE, colIndex=colIndex, rowIndex=rowIndex)
head(dat)
sum(dat$Zip*dat$Ext,na.rm=T)
fileUrl <- "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(fileUrl, useInternal=TRUE)
install.packages("xml")
install.packages("XML")
library("XML")
doc <- xmlTreeParse(fileUrl, useInternal=TRUE)
rootNode <- xmlRoot(doc)
sum(xpathSApply(rootNode, "//zipcode", xmlValue)==21231)
library(httr)
ClientID <- "5cee3618f8ee376f53d5"
ClientSecret <- "c3f0e1c2d624563f25f4a64fa4e24df057593178"
oauth_endpoints("github")
myapp <- oauth_app("github", "ClientID", "ClientSecret")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
install.packages("httpuv")
library("httpuv")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
myapp <- oauth_app("github", "ClientID", "ClientSecret")
gtoken <- config(token = github_token)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(sqldf)
install.packages("sqldf")
library("sqldf")
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(fileUrl, destfile="acs.csv", method="curl")
acs <- read.csv("acs.csv", header=T, sep=",")
sqldf("select pwgtp1 from acs where AGEP < 50")
hurl <- "http://biostat.jhsph.edu/~jleek/contact.html"
con <- url(hurl)
htmlCode <- readLines(con)
close(con)
sapply(htmlCode[c(10, 20, 30, 100)], nchar)
data <- read.csv("getdata-wksst8110.for", header = TRUE)
file_name <- "getdata-wksst8110.for"
df <- read.fwf(file=file_name,widths=c(-1,9,-5,4,4,-5,4,4,-5,4,4,-5,4,4), skip=4)
sum(df[, 4])
setwd("/Users/style/Desktop/Analytics/Source Code/ExData_Plotting2")
source("plot3.R")
?grepl
?colnames
source("plot4.R")
source("plot4.R")
?aes
source("plot4.R")
source("plot4.R")
?readRDS
fossildata <- read.table("Source_Classification_Code.rds")
SCC <- readRDS("Source_Classification_Code.rds")
?head
head(SCC)
View(SCC)
NEI <- readRDS("summarySCC_PM25.rds")
head(NEI)
source("plot5.R")
source("plot5.R")
?aggregate
source("plot5.R")
source("plot5.R")
source("plot5.R")
source("plot5.R")
?rep
source("plot6.R")
California_motor_emissions <- aggregate(California_motor[, 'Emissions'], by = list(California_motor$year), sum)
California_motor_emissions <- aggregate(California_motor[, 'Emissions'], by = list(California_motor$year), sum)
source("plot6.R")
source("plot5.R")
source("plot6.R")
source("plot6.R")
View(Combined_motor_emissions)
View(Combined_motor_emissions)
source("plot6.R")
View(Combined_motor_emissions)
View(California_motor)
View(California_motor)
View(California_motor_emissions)
View(Maryland_motor_emissions)
?aggregrate
??aggregate
?aggregate
colnames(California_motor_emissions) <- c('year', 'Emissions')
source("plot6.R")
source("plot6.R")
source("plot6.R")
source("plot6.R")
